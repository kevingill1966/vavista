diff --git sr_port/op_tcommit.c sr_port/op_tcommit.c
index 71ffb7a..f429f39 100644
--- sr_port/op_tcommit.c
+++ sr_port/op_tcommit.c
@@ -416,7 +416,8 @@ enum cdb_sc	op_tcommit(void)
 					if (NULL == (end = format_targ_key(buff, MAX_ZWR_KEY_SZ, cse->blk_target->last_rec, TRUE)))
 						end = &buff[MAX_ZWR_KEY_SZ - 1];
 					rts_error(VARLSTCNT(6) ERR_GBLOFLOW, 0, ERR_GVIS, 2, end - buff, buff);
-				} else if (!skip_invoke_restart)
+                } else if (!skip_invoke_restart && tp_pointer->restartable)
+
 					INVOKE_RESTART;
 				GTMTRIG_ONLY(DBGTRIGR((stderr, "op_tcommit: Return status = %d\n", status));)
 				return status;	/* return status to caller who cares about it */
diff --git sr_port/push_lvval.c sr_port/push_lvval.c
index 1199d6d..f8c4a60 100644
--- sr_port/push_lvval.c
+++ sr_port/push_lvval.c
@@ -20,6 +20,7 @@
 #include "gdsbt.h"
 #include "gdsfhead.h"
 #include "alias.h"
+#include "tp_frame.h"
 
 GBLREF mv_stent 	*mv_chain;
 GBLREF unsigned char 	*stackbase, *stacktop, *msp, *stackwarn;
@@ -34,12 +35,12 @@ lv_val *push_lvval(mval *arg1)
 	error_def(ERR_STACKOFLOW);
 	error_def(ERR_STACKCRIT);
 
-	/* Note that since this is only (currently) used by call-ins and no TP
-	   transaction can be (currently) be active during a call-in, we do not
+	/* Note that since this is only (currently) used by call-ins and no restartable
+       TP transaction can be (currently) be active during a call-in, we do not
 	   worry about setting up tp_var structures as is done in lv_newname().
 	   The assert below will catch if this condition changes.
 	*/
-	assert(!dollar_tlevel);
+    assert(dollar_tlevel == 0 || ((tp_frame *)stackbase)->restartable == 0);
 	PUSH_MV_STENT(MVST_LVAL);
 	mv_chain->mv_st_cont.mvs_lvval = lvp = lv_getslot(curr_symval);
 	LVVAL_INIT(lvp, curr_symval);
diff --git sr_unix/comlist.mk sr_unix/comlist.mk
index fe39015..2970f0d 100644
--- sr_unix/comlist.mk
+++ sr_unix/comlist.mk
@@ -236,7 +236,7 @@ dep_list:=$(addsuffix .d,$(filter-out $(basename $(sfile_list)),$(basename $(cfi
 
 # objects on link command lines
 mumps_obj=gtm.o
-gtmshr_obj=gtm_main.o
+gtmshr_obj=gtm_main.o gtmci.o gtmtx.o
 lke_obj=lke.o lke_cmd.o
 dse_obj=dse.o dse_cmd.o
 mupip_obj=mupip.o mupip_cmd.o
diff --git sr_unix/gtmshr_symbols.exp sr_unix/gtmshr_symbols.exp
index 4dfc1de..018cfc2 100644
--- sr_unix/gtmshr_symbols.exp
+++ sr_unix/gtmshr_symbols.exp
@@ -14,3 +14,6 @@ gtm_free
 gtm_filename_to_id
 gtm_is_file_identical
 gtm_xcfileid_free
+gtm_txstart
+gtm_txcommit
+gtm_txrollback
diff --git sr_unix/gtmtx.c sr_unix/gtmtx.c
new file mode 100644
index 0000000..12406bb
--- /dev/null
+++ sr_unix/gtmtx.c
@@ -0,0 +1,75 @@
+/*
+ * Exported transaction handling function
+ * Experiment in managing transactions in Python code.
+ */
+
+#include <stdio.h>
+#include <string.h>
+
+#include <mdef.h>      /* MV_STR, FALSE */
+#include <tp_frame.h>   /* NORMAL_MCODE_TSTART */
+#include <cdb_sc.h>     /* defines cdb enum returned from t_commit */
+#include <op.h>         /* declares op_trollback / op_tstart */
+#include <op_tcommit.h> /* declares op_tcommit */
+#include <gdsroot.h>    /* defines trans_num */
+
+#include "gtmxc_types.h" 
+
+GBLREF  trans_num   local_tn;
+
+unsigned long
+gtm_txstart(char *idstr)
+{
+    /*
+     * Takes NULL or a string of up to eight characters as the id 
+     * of the transaction, which is logged to the transaction
+     * log.
+     */
+    mval ts_mv;
+    ts_mv.mvtype = MV_STR;
+    if (idstr) {
+        ts_mv.str.len = strlen(idstr);
+        ts_mv.str.addr = idstr;
+    }
+    else {
+        ts_mv.str.len = 0;
+        ts_mv.str.addr = NULL;
+    }
+    /* the start is type 0, explicit */
+    op_tstart(0, TRUE, &ts_mv, -1); /* -1 = prevent restart */
+
+    /* This is only part of the transaction number.
+     * There must be a pid part and a time part
+     */
+    return (unsigned long)local_tn;
+}
+
+
+int
+gtm_txcommit(void)
+{
+    /*
+     * Since trestart is disabled, this code will not retry
+     * and in particular will not execute the code in a
+     * critical section before failing.
+     *
+     * This returns 0 for success, non-0 for error.
+     * You can investigate the failure codes in cdb_sc.h
+     */
+    enum cdb_sc rv ;
+    rv = op_tcommit();
+    return (int)rv;
+}
+
+void
+gtm_txrollback(int tlevel)
+{
+    /*
+     * Rollback the transaction. The tlevel can be provided
+     * to rollback nested transactions. 
+     * Use 0 when only one level of transactions is used
+     */
+    GBLREF  boolean_t implicit_trollback;  
+    implicit_trollback = FALSE;
+    op_trollback(tlevel);
+}
diff --git sr_unix/gtmxc_types.h sr_unix/gtmxc_types.h
index 81f83b2..9c811ba 100644
--- sr_unix/gtmxc_types.h
+++ sr_unix/gtmxc_types.h
@@ -84,4 +84,13 @@ void		gtm_xcfileid_free(xc_fileid_ptr_t fileid);
 void 		*gtm_malloc(size_t);
 void 		gtm_free(void *);
 
+/*
+ * Exported transaction handling function. These are provided so that
+ * a program using the Callin interface can manage transactions.
+ */
+#define GTMTX_AVAILABLE 1
+unsigned long gtm_txstart(char *);
+xc_status_t gtm_txcommit(void);
+void gtm_txrollback(xc_int_t);
+
 #endif /* GTMXC_TYPES_H */
